import { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router";
import { AppHeader } from "~/components/app-header";
import { EnhancedChatInput } from "~/features/welcome/enhanced-chat-input";
import type { Route } from "./+types/chat.$id";
import type { AIConfiguration } from "@athena/shared";

export function meta({ params }: Route.MetaArgs) {
  return [
    { title: `Chat ${params.id} - Athena` },
    { name: "description", content: "AI Chat Session" },
  ];
}

interface Message {
  id: string;
  content: string;
  role: "user" | "assistant";
  timestamp: Date;
}

export default function Chat({ params }: Route.ComponentProps) {
  const location = useLocation();
  const navigate = useNavigate();
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedConfig, setSelectedConfig] = useState<AIConfiguration | null>(
    location.state?.selectedConfig || null
  );
  const [attachedFiles, setAttachedFiles] = useState<File[]>(
    location.state?.initialFiles || []
  );

  useEffect(() => {
    // Handle initial message from navigation state
    const initialMessage = location.state?.initialMessage;
    const initialFiles = location.state?.initialFiles;
    
    if (initialMessage && messages.length === 0) {
      let content = initialMessage;
      if (initialFiles && initialFiles.length > 0) {
        content += `\n\n[Attached ${initialFiles.length} file(s): ${initialFiles.map(f => f.name).join(', ')}]`;
      }

      const userMessage: Message = {
        id: crypto.randomUUID(),
        content,
        role: "user",
        timestamp: new Date(),
      };

      setMessages([userMessage]);

      // Simulate AI response (replace with actual API call)
      setIsLoading(true);
      setTimeout(() => {
        const aiMessage: Message = {
          id: crypto.randomUUID(),
          content:
            "Hello! I'm your AI assistant. I received your message and I'm ready to help you with whatever you need. How can I assist you further?",
          role: "assistant",
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, aiMessage]);
        setIsLoading(false);
      }, 1000);
    }
  }, [location.state, messages.length]);

  const handleModelChange = (_configId: string, config: AIConfiguration) => {
    setSelectedConfig(config);
  };

  const handleSettingsClick = () => {
    navigate("/models");
  };

  const handleNewMessage = (message: string, files?: File[]) => {
    if (!message.trim() && (!files || files.length === 0)) return;

    let content = message;
    if (files && files.length > 0) {
      content += `\n\n[Attached ${files.length} file(s): ${files.map(f => f.name).join(', ')}]`;
    }

    const userMessage: Message = {
      id: crypto.randomUUID(),
      content,
      role: "user",
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    
    // Simulate AI response
    setIsLoading(true);
    setTimeout(() => {
      const aiMessage: Message = {
        id: crypto.randomUUID(),
        content: "I understand your message. This is a simulated response. In a real implementation, this would be generated by the selected AI model.",
        role: "assistant",
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, aiMessage]);
      setIsLoading(false);
    }, 1000);
  };

  return (
    <>
      <AppHeader
        breadcrumbs={[
          { label: "Athena AI", href: "/" },
          { label: "Chat", href: "/" },
          { label: `Session ${params.id.slice(0, 8)}...`, isCurrentPage: true },
        ]}
      />
      <div className="flex-1 flex flex-col bg-background">
        {/* Messages */}
        <div className="flex-1 overflow-y-auto">
          <div className="max-w-4xl mx-auto px-4 py-8 space-y-6">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}
              >
                <div
                  className={`max-w-[80%] p-4 rounded-2xl ${
                    message.role === "user"
                      ? "bg-primary text-primary-foreground"
                      : "bg-muted"
                  }`}
                >
                  <p className="text-sm leading-relaxed">{message.content}</p>
                  <p className="text-xs opacity-70 mt-2">
                    {message.timestamp.toLocaleTimeString([], {
                      hour: "2-digit",
                      minute: "2-digit",
                    })}
                  </p>
                </div>
              </div>
            ))}

            {isLoading && (
              <div className="flex justify-start">
                <div className="bg-muted p-4 rounded-2xl">
                  <div className="flex items-center gap-2">
                    <div className="flex gap-1">
                      <div className="w-2 h-2 bg-current rounded-full animate-pulse"></div>
                      <div
                        className="w-2 h-2 bg-current rounded-full animate-pulse"
                        style={{ animationDelay: "0.2s" }}
                      ></div>
                      <div
                        className="w-2 h-2 bg-current rounded-full animate-pulse"
                        style={{ animationDelay: "0.4s" }}
                      ></div>
                    </div>
                    <span className="text-sm text-muted-foreground">
                      Thinking...
                    </span>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Input area with enhanced chat input */}
        <div className="border-t border-border/50 bg-background/80 backdrop-blur-sm">
          <div className="max-w-4xl mx-auto px-4 py-4">
            <EnhancedChatInput
              onSubmit={handleNewMessage}
              onModelChange={handleModelChange}
              onSettingsClick={handleSettingsClick}
              placeholder="Type your message here..."
              disabled={isLoading}
              selectedModel={selectedConfig?.id}
            />
          </div>
        </div>
      </div>
    </>
  );
}
